// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NotasApi.models;

#nullable disable

namespace NotasApi.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20230427223433_big migration - genering all tables")]
    partial class bigmigrationgeneringalltables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("NotasApi.models.Answer", b =>
                {
                    b.Property<int>("IdAnswer")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdAnswer"));

                    b.Property<int?>("EvaluationAssignmentIdEvaluationAssignment")
                        .HasColumnType("int");

                    b.Property<int>("IdEvaluationAssignment")
                        .HasColumnType("int");

                    b.Property<int>("IdQuestionAlternative")
                        .HasColumnType("int");

                    b.HasKey("IdAnswer");

                    b.HasIndex("EvaluationAssignmentIdEvaluationAssignment");

                    b.HasIndex("IdQuestionAlternative");

                    b.ToTable("Answers");
                });

            modelBuilder.Entity("NotasApi.models.Career", b =>
                {
                    b.Property<int>("IdCareer")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCareer"));

                    b.Property<int>("IdProfSchool")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdCareer");

                    b.HasIndex("IdProfSchool");

                    b.ToTable("Careers");
                });

            modelBuilder.Entity("NotasApi.models.Course", b =>
                {
                    b.Property<int>("IdCourse")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCourse"));

                    b.Property<int>("IdCareer")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdCourse");

                    b.HasIndex("IdCareer");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("NotasApi.models.Evaluation", b =>
                {
                    b.Property<int>("IdEvaluation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdEvaluation"));

                    b.Property<int?>("IdReview")
                        .HasColumnType("int");

                    b.Property<int?>("IdTeacherCourse")
                        .HasColumnType("int");

                    b.HasKey("IdEvaluation");

                    b.HasIndex("IdReview");

                    b.HasIndex("IdTeacherCourse");

                    b.ToTable("Evaluations");
                });

            modelBuilder.Entity("NotasApi.models.EvaluationAssignment", b =>
                {
                    b.Property<int>("IdEvaluationAssignment")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdEvaluationAssignment"));

                    b.Property<int?>("EvaluationIdEvaluation")
                        .HasColumnType("int");

                    b.Property<int>("IdEvaluation")
                        .HasColumnType("int");

                    b.Property<int>("IdStudent")
                        .HasColumnType("int");

                    b.Property<float?>("Note")
                        .HasColumnType("real");

                    b.HasKey("IdEvaluationAssignment");

                    b.HasIndex("EvaluationIdEvaluation");

                    b.HasIndex("IdStudent");

                    b.ToTable("EvaluationAssignments");
                });

            modelBuilder.Entity("NotasApi.models.EvaluationXQuestion", b =>
                {
                    b.Property<int>("IdEvalXQuestion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdEvalXQuestion"));

                    b.Property<int>("IdEvaluation")
                        .HasColumnType("int");

                    b.Property<int>("IdQuestion")
                        .HasColumnType("int");

                    b.HasKey("IdEvalXQuestion");

                    b.HasIndex("IdEvaluation");

                    b.HasIndex("IdQuestion");

                    b.ToTable("EvaluationXQuestions");
                });

            modelBuilder.Entity("NotasApi.models.ProfessionalSchool", b =>
                {
                    b.Property<int>("IdProfSchool")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdProfSchool"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdProfSchool");

                    b.ToTable("ProfessionalSchools");
                });

            modelBuilder.Entity("NotasApi.models.Question", b =>
                {
                    b.Property<int>("IdQuestion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdQuestion"));

                    b.Property<string>("Question_description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TopicQuestion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdQuestion");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("NotasApi.models.QuestionAlternative", b =>
                {
                    b.Property<int>("IdQuestionAlternative")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdQuestionAlternative"));

                    b.Property<string>("Alternative")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdQuestion")
                        .HasColumnType("int");

                    b.Property<bool>("IsCorret")
                        .HasColumnType("bit");

                    b.HasKey("IdQuestionAlternative");

                    b.HasIndex("IdQuestion");

                    b.ToTable("QuestionAlternatives");
                });

            modelBuilder.Entity("NotasApi.models.Review", b =>
                {
                    b.Property<int>("IdReview")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdReview"));

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdStudent")
                        .HasColumnType("int");

                    b.Property<int>("ReviewInterval")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TopicReview")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdReview");

                    b.HasIndex("IdStudent");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("NotasApi.models.Semester", b =>
                {
                    b.Property<int>("IdSemester")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdSemester"));

                    b.Property<string>("NameSemester")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdSemester");

                    b.ToTable("Semesters");
                });

            modelBuilder.Entity("NotasApi.models.Student", b =>
                {
                    b.Property<int>("IdStudent")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdStudent"));

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdStudent");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("NotasApi.models.StudentCourse", b =>
                {
                    b.Property<int>("IdStudentCourse")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdStudentCourse"));

                    b.Property<float?>("Grade1")
                        .HasColumnType("real");

                    b.Property<float?>("Grade2")
                        .HasColumnType("real");

                    b.Property<float?>("Grade3")
                        .HasColumnType("real");

                    b.Property<int>("IdStudent")
                        .HasColumnType("int");

                    b.Property<int>("IdTeacherCourse")
                        .HasColumnType("int");

                    b.HasKey("IdStudentCourse");

                    b.HasIndex("IdStudent");

                    b.HasIndex("IdTeacherCourse");

                    b.ToTable("StudentCourses");
                });

            modelBuilder.Entity("NotasApi.models.Teacher", b =>
                {
                    b.Property<int>("IdTeacher")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdTeacher"));

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdTeacher");

                    b.ToTable("Teachers");
                });

            modelBuilder.Entity("NotasApi.models.TeacherCourse", b =>
                {
                    b.Property<int>("IdTeacherCourse")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdTeacherCourse"));

                    b.Property<int>("IdCourse")
                        .HasColumnType("int");

                    b.Property<int>("IdSemester")
                        .HasColumnType("int");

                    b.Property<int>("IdTeacher")
                        .HasColumnType("int");

                    b.HasKey("IdTeacherCourse");

                    b.HasIndex("IdCourse");

                    b.HasIndex("IdSemester");

                    b.HasIndex("IdTeacher");

                    b.ToTable("TeacherCourses");
                });

            modelBuilder.Entity("NotasApi.models.Answer", b =>
                {
                    b.HasOne("NotasApi.models.EvaluationAssignment", null)
                        .WithMany("Answers")
                        .HasForeignKey("EvaluationAssignmentIdEvaluationAssignment");

                    b.HasOne("NotasApi.models.Question", "Question")
                        .WithMany()
                        .HasForeignKey("IdQuestionAlternative")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("NotasApi.models.Career", b =>
                {
                    b.HasOne("NotasApi.models.ProfessionalSchool", "ProfessionalSchool")
                        .WithMany("Careers")
                        .HasForeignKey("IdProfSchool")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProfessionalSchool");
                });

            modelBuilder.Entity("NotasApi.models.Course", b =>
                {
                    b.HasOne("NotasApi.models.Career", "Career")
                        .WithMany("Courses")
                        .HasForeignKey("IdCareer")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Career");
                });

            modelBuilder.Entity("NotasApi.models.Evaluation", b =>
                {
                    b.HasOne("NotasApi.models.Review", "Review")
                        .WithMany("Evaluations")
                        .HasForeignKey("IdReview");

                    b.HasOne("NotasApi.models.TeacherCourse", "TeacherCourse")
                        .WithMany("Evaluations")
                        .HasForeignKey("IdTeacherCourse");

                    b.Navigation("Review");

                    b.Navigation("TeacherCourse");
                });

            modelBuilder.Entity("NotasApi.models.EvaluationAssignment", b =>
                {
                    b.HasOne("NotasApi.models.Evaluation", null)
                        .WithMany("EvaluationAssignments")
                        .HasForeignKey("EvaluationIdEvaluation");

                    b.HasOne("NotasApi.models.Student", "Student")
                        .WithMany()
                        .HasForeignKey("IdStudent")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("NotasApi.models.EvaluationXQuestion", b =>
                {
                    b.HasOne("NotasApi.models.Evaluation", "Evaluation")
                        .WithMany("EvaluationXQuestions")
                        .HasForeignKey("IdEvaluation")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NotasApi.models.Question", "Question")
                        .WithMany("EvaluationXQuestions")
                        .HasForeignKey("IdQuestion")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Evaluation");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("NotasApi.models.QuestionAlternative", b =>
                {
                    b.HasOne("NotasApi.models.Question", "Question")
                        .WithMany("QuestionAlternatives")
                        .HasForeignKey("IdQuestion")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("NotasApi.models.Review", b =>
                {
                    b.HasOne("NotasApi.models.Student", "Student")
                        .WithMany("Reviews")
                        .HasForeignKey("IdStudent")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("NotasApi.models.StudentCourse", b =>
                {
                    b.HasOne("NotasApi.models.Student", "Student")
                        .WithMany("StudentCourses")
                        .HasForeignKey("IdStudent")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NotasApi.models.TeacherCourse", "TeacherCourse")
                        .WithMany("StudentCourses")
                        .HasForeignKey("IdTeacherCourse")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");

                    b.Navigation("TeacherCourse");
                });

            modelBuilder.Entity("NotasApi.models.TeacherCourse", b =>
                {
                    b.HasOne("NotasApi.models.Course", "Course")
                        .WithMany("TeacherCourses")
                        .HasForeignKey("IdCourse")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NotasApi.models.Semester", "Semester")
                        .WithMany("TeacherCourses")
                        .HasForeignKey("IdSemester")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NotasApi.models.Teacher", "Teacher")
                        .WithMany("TeacherCourses")
                        .HasForeignKey("IdTeacher")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Semester");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("NotasApi.models.Career", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("NotasApi.models.Course", b =>
                {
                    b.Navigation("TeacherCourses");
                });

            modelBuilder.Entity("NotasApi.models.Evaluation", b =>
                {
                    b.Navigation("EvaluationAssignments");

                    b.Navigation("EvaluationXQuestions");
                });

            modelBuilder.Entity("NotasApi.models.EvaluationAssignment", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("NotasApi.models.ProfessionalSchool", b =>
                {
                    b.Navigation("Careers");
                });

            modelBuilder.Entity("NotasApi.models.Question", b =>
                {
                    b.Navigation("EvaluationXQuestions");

                    b.Navigation("QuestionAlternatives");
                });

            modelBuilder.Entity("NotasApi.models.Review", b =>
                {
                    b.Navigation("Evaluations");
                });

            modelBuilder.Entity("NotasApi.models.Semester", b =>
                {
                    b.Navigation("TeacherCourses");
                });

            modelBuilder.Entity("NotasApi.models.Student", b =>
                {
                    b.Navigation("Reviews");

                    b.Navigation("StudentCourses");
                });

            modelBuilder.Entity("NotasApi.models.Teacher", b =>
                {
                    b.Navigation("TeacherCourses");
                });

            modelBuilder.Entity("NotasApi.models.TeacherCourse", b =>
                {
                    b.Navigation("Evaluations");

                    b.Navigation("StudentCourses");
                });
#pragma warning restore 612, 618
        }
    }
}
